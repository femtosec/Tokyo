package jp.co.myogadanimotors.kohinata.strategy;

import jp.co.myogadanimotors.kohinata.strategy.context.IStrategyContext;
import jp.co.myogadanimotors.kohinata.strategy.context.IStrategyPendingAmendContext;
import jp.co.myogadanimotors.kohinata.strategy.context.IStrategyPendingAmendProcessor;
import jp.co.myogadanimotors.kohinata.strategy.context.IStrategyPendingCancelProcessor;
import jp.co.myogadanimotors.kohinata.strategy.validator.IValidator;

public interface IStrategy {

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // strategy lifecycle related
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void init(IStrategyContext context);

    void terminate(IStrategyContext context);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // validation related
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    IValidator[] getValidators();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // pending amend/cancel related
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    IStrategyPendingAmendContext createPendingAmendContext(IStrategyContext context);

    IStrategyPendingAmendProcessor createPendingAmendProcessor(IStrategyContext context, long requestId);

    IStrategyPendingCancelProcessor createPendingCancelProcessor(IStrategyContext context, long requestId);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // main logic
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void doAction(IStrategyContext context);
}
